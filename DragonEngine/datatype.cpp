#include "stdafx.h"
#include "datatype.h"

RECT g_rRectClip={0,0,SCREEN_WIDTH,SCREEN_HEIGHT};
HWND hWnd=NULL;
HINSTANCE hInstance=NULL;
float cosTable[361];
float sinTable[361];
float invcosTable[362];

USHORT AlphaTable[NUM_ALPHA_LEVELS][65535];
//log以2为底的对数
UCHAR gLog2[513] = 
{
	0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3, 4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4, 
	5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5, 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5, 
	6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6, 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6, 
	6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6, 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6, 
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,

	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 
};
void CreateAlphaTable(int alphaLevels,USHORT AlphaTable[][65535])
{
	if (!AlphaTable)
	{
		return;
	}
	int r,g,b;
	float alpha=0;
	float delta=EPSILON_E5+1/(float)(alphaLevels-1);
	for (int level=0;level<alphaLevels;level++)
	{
		for (int rgb=0;rgb<65535;rgb++)
		{
			_RGB565FROM16BIT(rgb,&r,&g,&b);

			r=(int)((float)r*(float)alpha);
			g=(int)((float)g*(float)alpha);
			b=(int)((float)b*(float)alpha);

			AlphaTable[level][rgb]=_RGB16BIT565(r,g,b);
		}
		alpha+=delta;
	}
}

